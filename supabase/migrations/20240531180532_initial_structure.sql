create table "public"."likes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "post_id" bigint,
    "user_id" uuid
);


alter table "public"."likes" enable row level security;

create table "public"."messages" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "content" text not null default ''::text,
    "receiver" uuid not null,
    "author" uuid not null
);


alter table "public"."messages" enable row level security;

create table "public"."posts" (
    "id" bigint generated by default as identity not null,
    "content" text,
    "author" uuid,
    "created_at" timestamp with time zone default now(),
    "photos" json default '[]'::json,
    "parent" bigint,
    "sold" boolean not null default false,
    "comments_number" bigint default '0'::bigint
);


alter table "public"."posts" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "name" text,
    "avatar" text default 'https://dbprlgmyxnufwcuckaxl.supabase.co/storage/v1/object/public/avatars/1710349165091default-avatar-icon-of-social-media-user-vector.jpghttps://dbprlgmyxnufwcuckaxl.supabase.co/storage/v1/object/public/avatars/1710349165091default-avatar-icon-of-social-media-user-vector.jpghttps://dbprlgmyxnufwcuckaxl.supabase.co/storage/v1/object/public/avatars/1710349165091default-avatar-icon-of-social-media-user-vector.jpg'::text,
    "rating" text,
    "cover" text,
    "about" text
);


alter table "public"."profiles" enable row level security;

create table "public"."reviews" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "receiver" uuid,
    "content" text,
    "author" uuid
);


alter table "public"."reviews" enable row level security;

create table "public"."saved_posts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid,
    "post_id" bigint
);


alter table "public"."saved_posts" enable row level security;

CREATE UNIQUE INDEX likes_pkey ON public.likes USING btree (id);

CREATE UNIQUE INDEX messages_pkey ON public.messages USING btree (id);

CREATE UNIQUE INDEX posts_pkey ON public.posts USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX reviews_pkey ON public.reviews USING btree (id);

CREATE UNIQUE INDEX saved_posts_pkey ON public.saved_posts USING btree (id);

alter table "public"."likes" add constraint "likes_pkey" PRIMARY KEY using index "likes_pkey";

alter table "public"."messages" add constraint "messages_pkey" PRIMARY KEY using index "messages_pkey";

alter table "public"."posts" add constraint "posts_pkey" PRIMARY KEY using index "posts_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."reviews" add constraint "reviews_pkey" PRIMARY KEY using index "reviews_pkey";

alter table "public"."saved_posts" add constraint "saved_posts_pkey" PRIMARY KEY using index "saved_posts_pkey";

alter table "public"."likes" add constraint "fk_likes_post_id" FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE not valid;

alter table "public"."likes" validate constraint "fk_likes_post_id";

alter table "public"."likes" add constraint "likes_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE not valid;

alter table "public"."likes" validate constraint "likes_post_id_fkey";

alter table "public"."likes" add constraint "likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."likes" validate constraint "likes_user_id_fkey";

alter table "public"."messages" add constraint "messages_receiver_fkey" FOREIGN KEY (receiver) REFERENCES profiles(id) not valid;

alter table "public"."messages" validate constraint "messages_receiver_fkey";

alter table "public"."posts" add constraint "posts_author_fkey" FOREIGN KEY (author) REFERENCES profiles(id) not valid;

alter table "public"."posts" validate constraint "posts_author_fkey";

alter table "public"."reviews" add constraint "reviews_receiver_fkey" FOREIGN KEY (receiver) REFERENCES profiles(id) not valid;

alter table "public"."reviews" validate constraint "reviews_receiver_fkey";

alter table "public"."saved_posts" add constraint "saved_posts_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE not valid;

alter table "public"."saved_posts" validate constraint "saved_posts_post_id_fkey";

alter table "public"."saved_posts" add constraint "saved_posts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."saved_posts" validate constraint "saved_posts_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, name, avatar)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

grant delete on table "public"."likes" to "anon";

grant insert on table "public"."likes" to "anon";

grant references on table "public"."likes" to "anon";

grant select on table "public"."likes" to "anon";

grant trigger on table "public"."likes" to "anon";

grant truncate on table "public"."likes" to "anon";

grant update on table "public"."likes" to "anon";

grant delete on table "public"."likes" to "authenticated";

grant insert on table "public"."likes" to "authenticated";

grant references on table "public"."likes" to "authenticated";

grant select on table "public"."likes" to "authenticated";

grant trigger on table "public"."likes" to "authenticated";

grant truncate on table "public"."likes" to "authenticated";

grant update on table "public"."likes" to "authenticated";

grant delete on table "public"."likes" to "service_role";

grant insert on table "public"."likes" to "service_role";

grant references on table "public"."likes" to "service_role";

grant select on table "public"."likes" to "service_role";

grant trigger on table "public"."likes" to "service_role";

grant truncate on table "public"."likes" to "service_role";

grant update on table "public"."likes" to "service_role";

grant delete on table "public"."messages" to "anon";

grant insert on table "public"."messages" to "anon";

grant references on table "public"."messages" to "anon";

grant select on table "public"."messages" to "anon";

grant trigger on table "public"."messages" to "anon";

grant truncate on table "public"."messages" to "anon";

grant update on table "public"."messages" to "anon";

grant delete on table "public"."messages" to "authenticated";

grant insert on table "public"."messages" to "authenticated";

grant references on table "public"."messages" to "authenticated";

grant select on table "public"."messages" to "authenticated";

grant trigger on table "public"."messages" to "authenticated";

grant truncate on table "public"."messages" to "authenticated";

grant update on table "public"."messages" to "authenticated";

grant delete on table "public"."messages" to "service_role";

grant insert on table "public"."messages" to "service_role";

grant references on table "public"."messages" to "service_role";

grant select on table "public"."messages" to "service_role";

grant trigger on table "public"."messages" to "service_role";

grant truncate on table "public"."messages" to "service_role";

grant update on table "public"."messages" to "service_role";

grant delete on table "public"."posts" to "anon";

grant insert on table "public"."posts" to "anon";

grant references on table "public"."posts" to "anon";

grant select on table "public"."posts" to "anon";

grant trigger on table "public"."posts" to "anon";

grant truncate on table "public"."posts" to "anon";

grant update on table "public"."posts" to "anon";

grant delete on table "public"."posts" to "authenticated";

grant insert on table "public"."posts" to "authenticated";

grant references on table "public"."posts" to "authenticated";

grant select on table "public"."posts" to "authenticated";

grant trigger on table "public"."posts" to "authenticated";

grant truncate on table "public"."posts" to "authenticated";

grant update on table "public"."posts" to "authenticated";

grant delete on table "public"."posts" to "service_role";

grant insert on table "public"."posts" to "service_role";

grant references on table "public"."posts" to "service_role";

grant select on table "public"."posts" to "service_role";

grant trigger on table "public"."posts" to "service_role";

grant truncate on table "public"."posts" to "service_role";

grant update on table "public"."posts" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."reviews" to "anon";

grant insert on table "public"."reviews" to "anon";

grant references on table "public"."reviews" to "anon";

grant select on table "public"."reviews" to "anon";

grant trigger on table "public"."reviews" to "anon";

grant truncate on table "public"."reviews" to "anon";

grant update on table "public"."reviews" to "anon";

grant delete on table "public"."reviews" to "authenticated";

grant insert on table "public"."reviews" to "authenticated";

grant references on table "public"."reviews" to "authenticated";

grant select on table "public"."reviews" to "authenticated";

grant trigger on table "public"."reviews" to "authenticated";

grant truncate on table "public"."reviews" to "authenticated";

grant update on table "public"."reviews" to "authenticated";

grant delete on table "public"."reviews" to "service_role";

grant insert on table "public"."reviews" to "service_role";

grant references on table "public"."reviews" to "service_role";

grant select on table "public"."reviews" to "service_role";

grant trigger on table "public"."reviews" to "service_role";

grant truncate on table "public"."reviews" to "service_role";

grant update on table "public"."reviews" to "service_role";

grant delete on table "public"."saved_posts" to "anon";

grant insert on table "public"."saved_posts" to "anon";

grant references on table "public"."saved_posts" to "anon";

grant select on table "public"."saved_posts" to "anon";

grant trigger on table "public"."saved_posts" to "anon";

grant truncate on table "public"."saved_posts" to "anon";

grant update on table "public"."saved_posts" to "anon";

grant delete on table "public"."saved_posts" to "authenticated";

grant insert on table "public"."saved_posts" to "authenticated";

grant references on table "public"."saved_posts" to "authenticated";

grant select on table "public"."saved_posts" to "authenticated";

grant trigger on table "public"."saved_posts" to "authenticated";

grant truncate on table "public"."saved_posts" to "authenticated";

grant update on table "public"."saved_posts" to "authenticated";

grant delete on table "public"."saved_posts" to "service_role";

grant insert on table "public"."saved_posts" to "service_role";

grant references on table "public"."saved_posts" to "service_role";

grant select on table "public"."saved_posts" to "service_role";

grant trigger on table "public"."saved_posts" to "service_role";

grant truncate on table "public"."saved_posts" to "service_role";

grant update on table "public"."saved_posts" to "service_role";

create policy "everyone can see likes"
on "public"."likes"
as permissive
for select
to public
using (true);


create policy "user can like posts"
on "public"."likes"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "users can delete their likes"
on "public"."likes"
as permissive
for delete
to public
using ((user_id = auth.uid()));


create policy "anyone can send message"
on "public"."messages"
as permissive
for insert
to public
with check (true);


create policy "see messages"
on "public"."messages"
as permissive
for select
to public
using (true);


create policy "any user can create posts"
on "public"."posts"
as permissive
for insert
to public
with check ((author = auth.uid()));


create policy "anyone can see all posts"
on "public"."posts"
as permissive
for select
to public
using (true);


create policy "user can delete their posts"
on "public"."posts"
as permissive
for delete
to public
using (true);


create policy "users can edit their own posts"
on "public"."posts"
as permissive
for update
to public
using (true)
with check (true);


create policy "users can set update status"
on "public"."posts"
as permissive
for update
to public
using (true)
with check (true);


create policy "anyone can see all users"
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "users can update their profiles"
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id))
with check ((auth.uid() = id));


create policy "eveyrone can see reviews"
on "public"."reviews"
as permissive
for select
to public
using (true);


create policy "user can delete their reviews"
on "public"."reviews"
as permissive
for delete
to public
using ((author = auth.uid()));


create policy "user can write reviews to other users"
on "public"."reviews"
as permissive
for insert
to public
with check ((auth.uid() = receiver));


create policy "write reviews"
on "public"."reviews"
as permissive
for insert
to public
with check ((auth.uid() = author));


create policy "users can delete the post they have saved"
on "public"."saved_posts"
as permissive
for delete
to public
using ((user_id = auth.uid()));


create policy "users can save posts"
on "public"."saved_posts"
as permissive
for insert
to public
with check ((user_id = auth.uid()));


create policy "users can see their saved posts"
on "public"."saved_posts"
as permissive
for select
to public
using ((user_id = auth.uid()));



